{
  "day01": {
    "python": {
      "avg_time": "201.845µs",
      "timing_iterations": 10,
      "notes": "Sorting implementation. Faster than heap solution.",
      "llm_assist": false
    },
    "rust": {
      "avg_time": "643.573µs",
      "timing_iterations": 10,
      "notes": "Sorting implementation. Easy to write.",
      "llm_assist": false
    },
    "complexity": "O(n log n)"
  },
  "day02": {
    "python": {
      "avg_time": "316.716µs",
      "timing_iterations": 10,
      "notes": "Didn't really focus on the impl too much, just used part 1 for part 2.",
      "llm_assist": false
    },
    "rust": {
      "avg_time": "2284.22µs",
      "timing_iterations": 10,
      "notes": "Didn't really focus on the impl too much, just used part 1 for part 2.",
      "llm_assist": false
    },
    "complexity": "O(n * k^2) where k is the number of ints per line"
  },
  "day03": {
    "python": {
      "avg_time": {
        "pt1_regex": "294.554µs",
        "pt1_iter": "1569.604µs", 
        "pt2_regex": "453.225µs",
        "pt2_iter": "3519.283µs"
      },
      "timing_iterations": 10,
      "notes": "Regex implementation significantly faster than iterative approach. Part 2 adds ~50% overhead.",
      "llm_assist": false
    },
    "rust": {
      "avg_time": "1.002ms",
      "timing_iterations": 10,
      "notes": "Used a set to store the visited coordinates.",
      "llm_assist": false
    },
    "complexity": "O(n)"
  },
  "day04": {
    "python": {
      "avg_time": {
        "pt1": "18.401ms",
        "pt2": "5.001ms"
      },
      "notes": "not optimized",
      "llm_assist": false
    },
    "rust": {
      "avg_time": {
        "pt1": "2.309542ms",
        "pt2": "804.959µs"
      },
      "notes": "not optimized",
      "llm_assist": false
    },
    "complexity": "O(n * m) where n is the number of lines, m is the average length of each line"
  },
  "day05": {
    "python": {
      "avg_time": {
        "pt1": "1.039171ms",
        "pt2": "0.797754ms"
      },
      "notes": "not optimized - need to calc big O",
      "llm_assist": false
    },
    "rust": {
      "avg_time": "957.709µs",
      "notes": "not optimized - need to calc big O",
      "llm_assist": false
    }
  },
  "day06": {
    "python": {
      "avg_time": "6.682449s",
      "notes": "I did not like this one!! Was a non-trivial amount of time invested",
      "llm_assist": false
    },
    "rust": {
      "avg_time": "2.034042s",
      "notes": "not optimized - need to calc big O",
      "llm_assist": true
    }
  },
  "day07": {
    "python": {
      "avg_time": "11.631659s",
      "notes": "not optimized - need to calc big O",
      "llm_assist": false
    },
    "rust": {
      "avg_time":  "2.143450333s",
      "notes": "not optimized - need to calc big O",
      "llm_assist": true
    }
  },
  "day12": {
    "notes": "one of my favorites i think... haven't worked that much with counting sides from polygons so kinda new",
    "favorite": true
  },
  "day13": {
    "notes": "reminds me of an old google interview",
    "favorite": true
  },
  "day14": {
    "notes": "the visualization is one of the best and the reddit thread was super interesting about entropy vs chinese remainder theorem",
    "favorite": true
  },
}
